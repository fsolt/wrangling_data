---
format:
  pdf:
    number-sections: true
    papersize: a4
    keep-tex: false
    include-in-header: 
      text: |
        \usepackage{typearea}
        \usepackage{endnotes}
        \let\footnote=\endnote

crossref:
  sec-prefix: OSM
  sec-labels: alpha A
    
author:
  - name: Yue Hu
    affiliations:
      - ref: tsu
    orcid: 0000-0002-2829-3971
    email: yuehu@tsinghua.edu.cn
    url: https://www.drhuyue.site
  - name: Yuehong Cassandra Tai
    affiliations:
      - ref: psu
    orcid: https://orcid.org/0000-0001-7303-7443
    email: yhcasstai@psu.edu
  - name: Frederick Solt
    affiliations:
      - ref: ia
    orcid: 0000-0002-3154-6132
    email: frederick-solt@uiowa.edu
    url: https://www.fsolt.org
affiliations:
  - id: tsu
    name: Department of Political Science, Tsinghua University, Beijing, China
  - id: psu
    name: Center for Social Data Analytics, Pennsylvania State University, University Park, USA
  - id: ia
    name: Department of Political Science, University of Iowa, Iowa City, USA
thanks: "Corresponding author: [yuehong-tai@uiowa.edu](mailto:yuehong-tai@uiowa.edu). Current version: `r format(Sys.time(), '%B %d, %Y')`.  Replication materials and complete revision history may be found at [https://github.com/fsolt/wrangling_data](https://github.com/fsolt/wrangling_data). The authors contributed equally to this work.  Yue Hu appreciates the funding support from the National Natural Science Foundation of China (72374116) and Tsinghua University Initiative Scientific Research Program (2024THZWJC01)."
citeproc: false # to make multibib and wordcount work
filters:
  - authors-block
  - multibib # separate bib for main and appendix
  - at: pre-render
    path: "_extensions/andrewheiss/wordcount/wordcount.lua"
validate-yaml: false # for multibib to work
bibliography: 
    main: "main_wrangling.bib"
citation_package: natbib
csl: "american-political-science-review.csl"
tables: true # enable longtable and booktabs
fontsize: 12pt
indent: true
geometry: margin=1in
linestretch: 1.5 # double spacing using linestretch 1.5
colorlinks: false
link-citations: true
execute:
  echo: false
  message: false
  warning: false
  dpi: 600
editor_options: 
  chunk_output_type: console
editor:
  render-on-save: false
title: |
  | Data Wrangling Before Harmonization:
  | Best Practices for Getting
  | Past the 'Janitor Work'
# subtitle: "Preliminary version. Do not circulate without permission."
abstract: "This article focuses on a preliminary step in any ex-post data harmonization project---wrangling the pre-harmonized data---and suggests best practices for helping scholars avoid errors in this often-tedious work. To provide illustrations of these best practices, the article uses the examples of pre-harmonizing procedures used to produce the Standardized World Income Inequality Database (SWIID), a widely used database that uses Gini indices from multiple sources to create comparable estimates, and the Dynamic Comparative Public Opinion (DCPO) project, which creates a workflow for harmonizing aggregate public opinion data."

keywords: 
  - Data generation process
  - Machine assistance
  - Manual coding
  - Data cleaning
  - Data management

---

```{r}
#| label: setup
#| include: false

options(repos = c(CRAN = "https://cloud.r-project.org"))

if (!require(cmdstanr)) {
  install.packages("cmdstanr", repos = c(
    "https://mc-stan.org/r-packages/",
    getOption("repos")
  ))
  library(cmdstanr)
  install_cmdstan() # C++ toolchain required; see https://mc-stan.org/cmdstanr/articles/cmdstanr.html
}

if (!require(pacman)) {
  install.packages("pacman")
}
library(pacman)

p_install(janitor, force = FALSE)
p_install_gh(c("fsolt/DCPOtools"), force = FALSE)

# load all the packages you will use below
p_load(
  # analysis
  cmdstanr,
  plm,
  osfr,

  # presentation
  gridExtra,
  modelsummary,
  dotwhisker,
  latex2exp,

  # data wrangling
  DCPOtools,
  janitor,
  countrycode,
  here,
  broom,
  tidyverse,
  glue
)

theme_set(theme_minimal())
set.seed(313)

use("dplyr", c("filter", "select")) # require R 4.5.0

# Function preload ------------------------------------------------------------------

## Beck-Katz panel-corrected standard errors
vcovHC_se <- function(x) {
  plm::vcovHC(x, method = "arellano", cluster = "group") %>% # default setting
    diag() %>%
    sqrt()
}

## Tabulation -----------------------------------------------------------------------
na_types_dict <- list(
  "r" = NA_real_,
  "i" = rlang::na_int,
  "c" = NA_character_,
  "l" = rlang::na_lgl
)

### A function that converts a string to a vector of NA types.
### e.g. "rri" -> c(NA_real_, NA_real_, rlang::na_int)
parse_na_types <- function(s) {
  positions <- purrr::map(
    stringr::str_split(s, pattern = ""),
    match,
    table = names(na_types_dict)
  ) %>%
    unlist()

  na_types_dict[positions] %>%
    unlist() %>%
    unname()
}

### A function that, given named arguments, will make a one-row tibble, switching out NULLs for the appropriate NA type.
as_glance_tibble <- function(..., na_types) {
  cols <- list(...)

  if (length(cols) != stringr::str_length(na_types)) {
    stop(
      "The number of columns provided does not match the number of ",
      "column types provided."
    )
  }

  na_types_long <- parse_na_types(na_types)

  entries <- purrr::map2(
    cols,
    na_types_long,
    function(.x, .y) {
      if (length(.x) == 0) .y else .x
    }
  )

  tibble::as_tibble_row(entries)
}

tidy.pgmm <- function(x,
                      conf.int = FALSE,
                      conf.level = 0.95,
                      ...) {
  result <- summary(x)$coefficients %>%
    tibble::as_tibble(rownames = "term") %>%
    dplyr::rename(
      estimate = Estimate,
      std.error = `Std. Error`,
      statistic = `z-value`,
      p.value = `Pr(>|z|)`
    )

  if (conf.int) {
    ci <- confint(x, level = conf.level) %>%
      as.data.frame() %>%
      rownames_to_column(var = "term") %>%
      dplyr::rename(
        conf.low = `2.5 %`,
        conf.high = `97.5 %`
      )
    result <- dplyr::left_join(result, ci, by = "term")
  }

  result
}

glance.plm <- function(x, ...) {
  s <- summary(x)
  as_glance_tibble(
    nobs = stats::nobs(x),
    n.country = pdim(x)$nT$n,
    na_types = "ii"
  )
}

glance.pgmm <- function(x, ...) {
  s <- summary(x)
  as_glance_tibble(
    nobs = stats::nobs(x),
    n.country = pdim(x)$nT$n,
    n.inst = dim(x$W[[1]])[2],
    na_types = "iii"
  )
}

## dotwhisker::small_multiple() hacks

body(small_multiple)[[19]] <- substitute(
  p <-
    ggplot(
      df,
      aes(
        y = estimate,
        ymin = conf.low,
        ymax = conf.high,
        x = as.factor(model),
        colour = submodel
      )
    ) +
    do.call(geom_pointrange, point_args) +
    ylab("") +
    xlab("") +
    facet_grid(
      term ~ .,
      scales = "free",
      labeller = label_parsed,
      # enable LaTeX facet labels
      switch = "y"
    ) + # put facet labels on left
    scale_y_continuous(position = "right") # put axis label on right
)

```

\pagebreak

# A Wrangling Issue of Data Harmonization

<!-- - Increasing more projects involves large amounts of data
- Researchers have found serious problems when data selection and models selection are inapprorpiate: the wrangling in between can be also problematic
    - when invoivling arranging multiple data sets, or ra jobs
    - Problematic aggregated way, the plot
- The point of this section is to lay out a practical 3-step routine for researchers to wrangle data for researchers' reference
    - the two principles: 
      - As much as possible (if updated is also possible, external validity)
      - As accuracy as possible -> transparent (internal validity)
    - The two examples
      - SWIID
      - DCPO -->

Empowered by the spreading Internet and advancing computational power, researchers have entered an unprecedented age of data availability.
A growing volume of social science research aims to take the benefit to extend the generality: they employ large quantities of data drawn from different sources.
However, as @Slomczynsi2025 emphasize, ensuring the quality of harmonized datasets remains a significant challenge in handling fitness to use and raw data quality monitoring among others.
Taking large-scale survey harmonization as an example, they highlight how documenting variation across source datasets improves transparency and decision-making.
Beyond the focus on the harmonization process itself, we argue that quality assurance must begin earlier, because harmonization depends on the quality of the preceding step: data wrangling-the step where rawest inputs are selected, processed, and prepared for harmonization.

Nevertheless, the increasing amount and diversity of data is the challenge of data wrangling, due to a notorious bulk of manual work on indicator identification, data merging, data scaling, and so on [see, e.g., @Lohr2014].
The repetitive "janitor work" is often tiresome and easy to introduce errors in data collection procedure. 

The issue is compounded when researchers rely on secondary sources such as processed codebooks rather than verifying original raw data. 
Such dependence increases the risk of compounding errors, especially when researchers collect and integrate multiple datasets, each constructed independently and following its own protocol conventions.

Beyond error risks, manual wrangling complicates full reproducibility in research pipeline which starts with the rawest form of the data to the final results [@Liu2019].
These challenges are amplified when raw data comes from heterogeneous sources and have been processed using various software environments over time.
This is a common scenario in secondary data collection.
For example, older survey files stored in SPSSâ€™s ASCII or portable formats often require extensive restructuring before they can be merged with new format of data.
Such undocumented transformations make it difficult to track changes and undermine transparency.

Finally, even meticulous documentation cannot eliminate the influence of human discretion embedded in manual processing.
Such discretion leaves behind few traces, making it difficult for collaborators or reviewers to verify the wrangling process or trace sources of error.

In short, poor source data quality, the absence of reproducibility, and untrackable human discretion in manual janitor work have collectively became the largest obstacle on the way to data harmonization, which yet have thus far gained little attention.

In this article, we provide a practical routine taken the advantage of automatic programming and team work to reduce such data-entry errors and improve the reproducibility and transparency of the wrangling process for researchers and reviewers to check the errors.
The routine includes three steps: data selection, data entry, and opening.
We illustrate how researchers use this routine on statistical (*hard*) and opinion (*soft*) data with two ongoing harmonization efforts, the Standardized World Income Inequality Database (SWIID) and the Dynamic Comparative Public Opinion (DCPO) project.


# A 3-Step Routine for Data Harmonization

Our routine aims to helping researchers reach three goals for scientific research: 

1. To incorporate as much available data as possible to provide base for comparable data and increase generality of the inferences;
1. To reduce the manual entry errors to improve the accuracy of the harmonized data and analytic data; and 
1. To improve the reproducibility of data wrangling process for the sake of transparency.

The routine decomposes a data-wrangling process into three steps: 

1. Team-based concept construct and data selection;
1. Data entry automation; and 
1. "Second-order" opening.

To illustrate the above routine, we use two data harmonization projects as examples, SWIID and DCPO.
SWIID is a long-running project that seeks to provide harmonized income inequality statistics for the broadest possible coverage of countries and years [@Solt2009; @Solt2015; @Solt2016; @Solt2020].
As of its most recent update at the time of this writing, its source data consists of some 27,000 observations of the Gini coefficient of income distribution in nearly 200 countries over as many as 65 years, collected from over 400 separate sources including international organizations, national statistics bureaus, and academic studies.

DCPO is both a method and a database.
Scholarship on comparative public opinion only rarely benefits from relevant items asked annually by the same survey in many countries [see, e.g., @HagemannEtAl2017].
To address the lack of cross-national and longitudinal data on many topics, a number of works have presented latent variable models that harmonize available but incomparable survey items [see @CaugheyEtAl2019; @Claassen2019; @McGannEtAl2019; @Solt2020; @KolczynskaEtAl2024].
Along this line, DCPO not only provides latent variable measurements but also automatized and reproducible data collection [@Solt2020], which has been applied in a complete pipeline for a variety of topics such as gender egalitarianism [@WooEtAl2023], political interest [@HuSolt2024a], and support for gay rights [@WooEtAl2024], among other aspects of public opinion and open it freely for global researchers (see more updated data collections at <https://dcpo.org/>).

In the following sections we first address the common challenges for the phases of data wrangling and explain how our routine can help deal with it illustrated with the data wrangling processes of the SWIID and DCPO projects.

## Step 1: Team-Based Construct Building and Data Selection

Large scale of data selection and cleaning is almost always tedious, as something to be delegated to research assistants, to someone---indeed anyone, but usually research assistants (RA)---else [see @Torres2017].
This manual procedure is easy to make mistakes and errors.
@HaegemansEtAl2019 [p. 1] has demonstrated examples of misrouted financial transactions and airline flights.
In a more systematic examination, @BarchardPace2011 found that RA assigned in an experiment to carefully enter data manually, even those instructed to double-check their entries against the original, had error rates approaching 1% in just a single roughly half-hour session.
The consequences of such errors can be pernicious.

Our antidote for this issue is a combination of team work and automation. 
We will focus more on the team work and discuss the latter in @sec-automate.
The goal here is to have consistent understanding on conceptualized construct, select valid data for later measurement and/or analyses, and reduce biases caused by inconsistent human judgment.
A team work framework for this end requires a deliberative set and a dual-entry process.

A deliberative set requires the members in a research team---regardless several coauthors or a primary author with one or two RAs---to have a clear and coherent understanding of the reseach questions and associated data goals.
These understandings will help the team members identify the right data to collect and discover extra useful data sources that are not in the initial plan.

In the SWIID program, for example, we told RAs that the goal of the research is to generate comparable statistics of country-level economic inequality.
We provide a list of sources mainly from national statistic bureaus for them to start, but we also told them that update statistics for some countries may come from academic papers, published documents, and other sources and they are free to add them in while making sure a valid link of the new sources are also recorded.

Ensuring team members to understand how the data would used later is also important, as they could have a better sense of what data are analyticable and a forward perspective of how many situations would the later entry part need to take care. 
In the SWIID project, we told the RAs that the inequality statistics be recorded in four formats: Gini index in disposable (post-tax, post-transfer) income, Gini in market (pre-tax, pre-transfer) income, absolute redistribution (market-income inequality minus net-income inequality), or relative redistribution (market-income inequality minus net-income inequality, divided by market-income inequality).
So, for later unification work, they need not only to record the digits but also seek documents to explain the methods of the statistics.


In the DCPO project, clearly defining and agreeing upon the latent construct among team members is a critical first step for ensuring theoretical comparability across countries and over time  [@Koc2025]. 
This process begins with a shared conceptual foundation established through literature review and corresponding pre-defined potential dimensions of the latent opinion.
Each team member is then assigned survey datasets from specific geographic regions and tasked with identifying potentially relevant items and potential dimensions based on both general theoretical guidance and region-specific knowledge. 
This structure ensures that the construct is informed by both global theory and local context.

Before data selection begins, team members undergo hands-on training on how the method work and what type of data and detail they need to collect, such as data format and weighting types, which provide a valuable help of later build the automative data preparation software. 

Following the initial round of item selection and collection, the dural-entry section comes in. 
In this stage, each team member reviews and re-codes the survey data originally handled by another member.
The independently coded versions are then compared to detect discrepancies, which may arise from misinterpretations of the construct, ambiguous item wording, or common entry errors.

Disputed cases are flagged for group discussion.
Some mismatches may indicate items that may not be conceptually equivalent across cultures or regions, and others suggest multidimensionality that requires theoretical disaggregation.
For the latter, we either categorize such items into pre-defined dimensions and/or revise the codebook accordingly to add new dimensionsâ€”an iterative process aimed at improving construct validity, intercoder reliability, and reducing oversimplification of target variable [@Slomczynsi2025].

Therefore, we broke down the cross-check step into several lab meetings interspersed during the data selection to collect new insights from each members' selection works and make sure everyone were on the same page through the whole process.
The process ends with a systemic cross-check of the final selected data among members. 

In the SWIID project, the dataset requires update for almost every year and we also often hire new RAs.
Therefore, the cross-check is often done in a rolling basis usually by the rookies who are in charge of checking the old data and updating malfunctional links.
This is both a learning process and a way to improve data accuracy.


## Step 2: Data Entry Automation {#sec-automate}

Formating data is arguably the easiest step to involve manual errors and controversies.
The best solution is to automate the entry process taken the advantages of the programming languages and application programming interfaces (APIs) of the data source.

In the DCPO case, the entire data entry process accumulating the survey responses is fully automated through the use of the R-based software, `DCPOtools` [@SoltEtAl2018a].
This software processes the raw survey files directlyâ€”rather than relying on potentially inaccurate codebooksâ€”ensuring that data entry is reproducible.
Specifically, `DCPOtools` reads in each recorded survey dataset (including legacy formats such as ASCII or portable .por files), converts them to R-readable objects, extracts the variable of interest, reorders the response values for this variable from least to most of the concept investigated, applies survey weights, and then aggregates the weighted number of respondents in each of the reordered response categories in each country for each year based on the actual survey fieldwork dates.
To further address the concerns about theoretical comparability, using a data-driven approach, `DCPO` projects employ a conservative filtering process. 
Items that appear in fewer than five country-years in countries surveyed at least three times are removed through a two-round checking process [@WooEtAl2024; @TaiSolt2025]. 
This approach aims to minimize the risk of sacrificing comparability for the sake of regional or temporal coverage [@Koc2025]. 


`DCPOtools` also automatically ensures that country names are standardized using the excellent @Arel-BundockEtAl2018's excellent `countrycode` and that the years accurately reflect actual fieldwork dates using internal crosswalk tables.
The aggregated number of respondents for each observed response-item-country-year then serve as the source data for the latent variable model where data is harmonized at the country-year level.


```{r}
#| label: data
#| include: false

api <- c("LISSY", "CEPALStat", "OECD", "Eurostat", "Beegle et al. 2016", "Statistics Canada", "Statistics Denmark", "Statistics Finland", "CSO Ireland", "Statistics Norway", "Statistics Sweden", "World Bank Poverty & Inequality Platform", "Statbank Greenland")
sheet <- c("SEDLAC", "Transmonee 2012", "Personal communication, K. Beegle, 2016-08-01", "World Bank Povcalnet", "Australian Bureau of Statistics", "Instituto NaciÃ³nal de EstadÃ­stica de Bolivia", "Instituto de Pesquisa EconÃ³mica Aplicada", "Departamento Administrativo Nacional de EstadÃ­stica Colombia", "Instituto NaciÃ³nal de EstadÃ­stica y Censos Costa Rica", "Central Agency for Public Mobilization and Statistics Egypt", "Statistics Estonia", "Statistics Georgia", "Statistics Hong Kong 2017", "Statistics Indonesia", "Istat", "Statistical Institute of Jamaica", "Kazakhstan Committee on Statistics", "Statistics Korea", "National Statistical Committee of Kyrgyzstan", "National Bureau of Statistics of Moldova", "Statistical Office of Montenegro", "Statistics New Zealand 1999", "Philippines Statistical Agency", "Russian Federal State Statistics Service", "Singapore Department of Statistics", "Slovenia Statistics Office", "Slovenia Statistics Office 2005", "Instituto Nacional de EstadÃ­stica Spain", "Switzerland Federal Statistics Office", "Taiwan Directorate General of Budget, Accounting, and Statistics", "Turkish Statistical Institute", "UK Office for National Statistics", "Institute for Fiscal Studies", "U.S. Congressional Budget Office", "U.S. Census Bureau", "Instituto Nacional de EstadÃ­stica Venezuela", "Milanovic 2016", "Milanovic 2016; Brandolini 1998", "Ackah, Bussolo, De Hoyos, and Medvedev 2008", "NESDC Thailand", "U.S. Census Bureau 1998", "DirecciÃ³n General de EstadÃ­stica, Encuestas y Censos")
scrape <- c(
  "National Statistical Service of Armenia", "Belarus National Committee of Statistics", "Statistics Hong Kong 2012", "Statistics Hong Kong 2007", "DirecciÃ³n General de EstadÃ­stica, Encuestas y Censos 2016", "Economy Planning Unit of Malaysia", "Perry 2018", "DirecciÃ³n General de EstadÃ­stica, Encuestas y Censos 2017", "Statistics Sri Lanka 2015", "NESDB Thailand", "Instituto Nacional de EstadÃ­stica Uruguay", "General Statistics Office of Vietnam 2013", "General Statistics Office of Vietnam", # <- scrape from pdf
  # webscrape ->
  "Institut National de la Statistique et des Ã‰tudes Ã‰conomiques France", "Statistical Center of Iran", "National Statistical Office of Thailand"
)

length(api) <- length(sheet)
length(scrape) <- length(sheet)

mode <- tibble(api, sheet, scrape) %>%
  gather(key = mode, value = source1) %>%
  filter(!is.na(source1))

swiid_source <- read_csv("https://raw.githubusercontent.com/fsolt/swiid/master/data/swiid_source.csv",
  col_types = "cdddcclcccc"
) %>%
  left_join(mode, by = "source1") %>%
  mutate(mode = if_else(is.na(mode), "hand", mode))

wordify_numeral <- function(x) setNames(c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", " seventeen", "eighteen", "nineteen"), 1:19)[x]

api_percent <- swiid_source %>%
  count(mode == "api") %>%
  mutate(p = round(n / nrow(swiid_source) * 100)) %>%
  filter(`mode == "api"` == TRUE) %>%
  pull(p)

automated_percent <- swiid_source %>%
  count(mode == "hand") %>%
  mutate(p = round(n / nrow(swiid_source) * 100)) %>%
  filter(`mode == "hand"` == FALSE) %>%
  pull(p)

```

```{r}
#| label: fig-dataMethod
#| echo: false
#| fig-cap: "Income Inequality Observations by Method of Collection"
#| fig-height: 2
#| fig-width: 4


swiid_source %>%
  count(mode) %>%
  mutate(method = fct_recode(factor(mode),
    "API" = "api",
    "Spreadsheet\nDownload" = "sheet",
    "Web/PDF\nScrape" = "scrape",
    "Hand\nEntered" = "hand"
  ) %>%
    fct_relevel(
      "Hand\nEntered",
      "Web/PDF\nScrape",
      "Spreadsheet\nDownload",
      "API"
    )) %>%
  ggplot(aes(x = n, y = method, fill = method)) +
  geom_bar(stat = "identity") +
  theme_bw() +
  theme(axis.title.y = element_blank()) +
  xlab("Observations") +
  scale_fill_manual("Legend", values = c(
    "Hand\nEntered" = "gray75",
    "Web/PDF\nScrape" = "gray10",
    "Spreadsheet\nDownload" = "gray10",
    "API" = "gray10"
  )) +
  theme(legend.position = "none")

# Hand-Entered and Machine-Collected
```



While coding datasets and items into structured spreadsheets facilitates automation, this is still not the the complete version of data entry automation.
An even better version starts the automation since the data selection step via programming and APIs.
As shown in @fig-dataMethod, the current version of SWIID grapes `r api_percent`% of the observations through API.
When no API is available, the automation script downloads and reads any available spreadsheets [see @Wickham2016].
In the absence of a spreadsheet, the process of scraping the data either directly from the web or, preferably, from a pdf file [see @Sepulveda2024] is automated.
Together the collection of `r automated_percent`% of the source data is scripted.
This means not only that the possibility of errors introduced by hand entry for a vast majority of observations is eliminated but also that the updates and revisions that are frequent in these data are automatically incorporated as they become available.^[
  The R community has often built software to ease the access of APIs and make the batch work for multiple waves of data in a more comfortable and efficient way [see @Blondel2018; @MagnussonEtAl2014; @LahtiEtAl2017; @Lugo2017; @WickhamEtAl2018].
]

For data sources, such as those from academic articles or books, that have to be entered in hand, there is still rooms for automation. 
For the remaining `r 100 - automated_percent`% of the SWIID observations, for instance, we collected them using Sepulveda's `tabulapdf` R package to avoid data-entry errors as long as they are in pdf [@Sepulveda2024].
The advanced Optical Character Recognition (OCR) can extend this method on data sources even in hard copies.

And finally, one source of SWIID contains crucial information encoded in the typeface of its tables [see @MitraYemtsiv2006, 6]; this information would be lost if the tables were read directly into R.
We reapplied the approach from the data selection here to enter them twice into separate spreadsheets.^[Most often this has been done by two different investigators, but sometimes sequentially by a single researcher.]
The dual-entry process allows for automated cross-checks of the newly entered data that increase the chances that errors are identified and corrected [see @BarchardPace2011].


## Step 3: "Second-Order" Opening

Since the replication crisis, replication files for analytical results in academic articles has become a standard requirement for top-tier journals in political science [@ChangLi2015; @OpenScienceCollaboration2015]. 
Nevertheless, the continual raising controversies on the researcher degrees of freedom indicated that current open is still not adequate.^[See a summary of the "researcher degrees of freedom" literature in @HuEtAl2024a.]
Especially in relation with data harmonization, we eager researchers to conduct a, what we called, the "second-order" opening. 
That is, not only opening analytical steps (the "first-order") but also the data generation process (the "second-order"), including data collection, data cleaning, and data wrangling, as mentioned above.

If researchers applied our suggestions of team-based construct building, systematic data selection, and automated data entry, the second-order opening becomes both feasible and efficient.
Along with a clearly conceptualized theoretical framework, researchers can simply share their programming scripts for data downloading, formatting, and wrangling, ensuring that the full pipeline is documented and reproducible.

With developed scientific and technical publishing system, such as Quarto or R markdown, and version control platforms (e.g., Github) and open collaboration platforms (e.g., Open Science Framework, OSF), researchers can integrate the entire workflowâ€”from raw data collection to final analysisâ€”within a single, publicly trackable archive.
We reached at this step for all the DCPO projects so far. 
Readers can find a Github repo for the research from scratch, and every wave of data update in the corresponding OSF project.


<!--Readers can find a comprehensve example applied the above second-order openning strategy in a DCPO project, @TaiEtAl2024. 
Its replication data includes three types of files beside a instruction (.md): a Rmarkdown file recording all the codes we wrangled and analyzed the data together with the main text and appendices, several auxiliary files (.lua, .bib) for the Rmarkdown to render, and data files for running each chunk of codes in the Rmarkdown [@TaiEtAl2022].
Moreover, readers can track the entire process of how the project grew through an publicly open Github repo, <https://github.com/fsolt/dcpo_dem_mood>.
They can also see the data updating history and outcomes in an OSF project, <https://osf.io/tnp2a/>.
Similarly, people can see the updating history of the in  SWIID dataset in <https://github.com/fsolt/swiid>.-->

# Discussion

Harmonization projects are often data-intensive efforts, data-wrangling is often substantial, and data-entry errors are particularly dangerous to these undertakings.
These errors would be rarely uncovered by merely examining the data and their distribution [@BarchardPace2011, 1837-1838].
Our routine---as fully demonstrated in @fig-diagram ---provide an approach to both minimize the manual errors during the wrangling process and provide transparent records for checking the errors and replications.

![](images/data_diagram.png){#fig-diagram fig-align="center" height=500}

To accomplish the routine---like similar open-science prescriptions---undoubtedly take effort [see @EngzellRohrer2021].

While the double-entry method is labor intensive, experiments have shown that it reduces error rates by thirty-fold even when done immediately after the initial collection and by the same person [@BarchardPace2011, 1837]; this payoff justifies the extra effort.
Teamwork cuts the other way.
For any project involving identifying data by hand, splitting the task up among team members lessens the probability of errors due to fatigue arising in the first place, and coupled with the double-entry method, allows discrepancies to be noted, discussed, and resolved correctly.

Fortunately, social scientists today benefit from growing efforts to standardize harmonization workflows [@Slomczynsi2025] and automate data processing and linkage [@Kritzinger2025].
Researchers can increasingly reuse high-quality harmonized datasets in new projects, enhancing research efficiency and comparability.


Moreover, as the examples of the API packages used by the SWIID and `DCPOtools` demonstrate, many common janitor-work chores already have been packaged as open-source software to make researchers' task even easier and more straightforward. 
With the development of large language models, in the near future perhaps some parts of the routine can be accomplished by intelligent agents---which would definitely push our automation recommendation to another level, potentially fulfilling calls to push automation to the next level [@Kritzinger2025].

A final point we would like to clarify is that, in our three-step routine, researchers remain central to the harmonization process.
As shown @fig-diagram and illustrated in the SWIID and DCPO examples, the researchers have the responsibility for all the important decisions from clarifying the research question, building theoretical constructs, and specifying data demands at the beginning to conducting version controls and developing a full-pack replication folder in the end.
Early and critical stepsâ€”such as construct development and codebook refinementâ€”must be conducted iteratively and collaboratively to achieve high intercoder reliability.
Even when data entry is automated, human validation remains essential.
Researchers must verify that variables conform to expected formats (e.g., string, numeric) and that values fall within plausible ranges.
To minimize system-related discrepancies, the computing environment used should also be documented [@Liu2019].

For any ex-post data harmonization project, careful attention to the pre-harmonization stagesâ€”construct building, data identification, collection, and entryâ€”substantially contributes to the overall quality of the harmonized dataset.
While some level of error is inevitable even under best practices, following systematic procedures can mitigate risks. 
Nonetheless, with researchers' responsiblee attention, not only can the threat of data-entry errors to our 'janitor work', our efforts at data harmonization, and our understanding of the world be minimized, but the transparency, openness, and credibility of our research can continue to grow.

\newpage
\theendnotes

# References {.unnumbered}

::: {#refs-main}
:::




